package Model.APPS.I2S_CONFIG.v4_0_6.Templates;

import Model.APPS.I2S_CONFIG.v4_0_6.I2S_CONFIG

out.print("""
/**
 * @file i2c_config_conf.c
 * @date 2016-05-30
 *
 * NOTE:
 * This file is generated by DAVE-4. Any manual modification done to this file will be lost when the code is
 * regenerated.
 *
 * @cond
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015-2020, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2016-07-30:
 *     - Initial version for DAVEv4
 * 2016-08-17:
 *     - Changed to generate protocol interrupt node configuration by default.
 *
 * @endcond
 *
 */
/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/
#include "i2s_config.h"

""")

/*----- GTab: General -----*/
// GGroup: Operation Mode
Map device_type = [
	'Master'    : 'XMC_I2S_CH_BUS_MODE_MASTER',
	'Slave'     : 'XMC_I2S_CH_BUS_MODE_SLAVE'
]

Map signal_polarity = [
	'Direct'    : 'XMC_I2S_CH_WA_POLARITY_DIRECT',
	'Inverted'  : 'XMC_I2S_CH_WA_POLARITY_INVERTED'
]

// GGroup: Baud Rate Generator
Map input_combination_mode = [
	'None' : "XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED",
	'Rising Edge'  : 'XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE',
	'Falling Edge' : 'XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE',
	'Both Edges'   : 'XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES'
]

// GGroup: Shift Clock Signal
Map shift_clock_settings = [
	'No Delay, No Polarity Inversion' : 'XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED',
	'Delayed By 1/2 Shift Clock Period, No Polarity Inversion' : 'XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED',
	'Delayed By 1/2 Shift Clock Period, Polarity Inversion' : 'XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED',
	'No Delay, Polarity Inversion' : 'XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED'
]

/*----- GTab: Events -----*/
// GGroup: Protocol Events
List protocol_events = [
	"XMC_I2S_CH_EVENT_WA_RISING_EDGE",
	"XMC_I2S_CH_EVENT_WA_FALLING_EDGE",
	"XMC_I2S_CH_EVENT_WA_GENERATION_END",
	"XMC_I2S_CH_EVENT_BAUD_RATE_GENERATOR",
	"XMC_I2S_CH_EVENT_DATA_LOST",
	"XMC_I2S_CH_EVENT_DX2TIEN_ACTIVATED"
]

/*----- GTab: FIFO -----*/
// GGroups: Tx/Rx FIFO Buffer Configuration
Map fifo_size = [
	0 : 'XMC_USIC_CH_FIFO_DISABLED',
	1 : 'XMC_USIC_CH_FIFO_SIZE_2WORDS',
	2 : 'XMC_USIC_CH_FIFO_SIZE_4WORDS',
	3 : 'XMC_USIC_CH_FIFO_SIZE_8WORDS',
	4 : 'XMC_USIC_CH_FIFO_SIZE_16WORDS',
	5 : 'XMC_USIC_CH_FIFO_SIZE_32WORDS',
	6 : 'XMC_USIC_CH_FIFO_SIZE_64WORDS'
]

for (I2S_CONFIG appInst : appInstancesList ) 
{
	List USIC_ChannelUri = appInst.hwres_usic_channel.getSolverUri() 	// USIC channel resource assigned by solver
	
	/* If the channel resource is available */
	if (USIC_ChannelUri != null) 
	{
		/* Resources values derived from the URI */
		String appLabel,				// Name provided for APP instance
			   ModuleInst, 				// USIC module number
			   ChannelInst 				// USIC channel number in the module
		appLabel = appInst.getInstanceLabel()
		
		boolean isfamily_4x = daveEnv.project.selectedDevice.deviceId.family == "XMC4",
				isfamily_1x = daveEnv.project.selectedDevice.deviceId.family == "XMC1",
				
				isDeviceMaster = appInst.gcombo_device_type.value == "Master",
				isDeviceSlave = appInst.gcombo_device_type.value == "Slave",
				
				isDelayCompensationEnabled = appInst.gcheck_enable_delay_compensation.value,
				
				usesDX1 = appInst.gcombo_device_type.value == "Slave" ||
						(
							appInst.gcombo_device_type.value == "Master" &&
							appInst.gcombo_dx1_input_stage_master.value != "None"
						),
				
				usesDX2 = appInst.gcombo_device_type.value == "Slave" ||
						(
							appInst.gcombo_device_type.value == "Master" &&
							appInst.gcombo_dx2_input_stage_master.value != "None"
						),
				isTDVEnabled = appInst.gcombo_device_type.value == "Master" &&
						       appInst.gcombo_dx2_input_stage_master.value == "Transmit Data Validation",
							   
				enableDX1InputInversion = (appInst.gcombo_device_type.value == "Slave" ||
						                  (appInst.gcombo_device_type.value == "Master" &&
							               appInst.gcombo_dx1_input_stage_master.value != "None")) &&
					                      appInst.gcheck_enable_invert_dx1_input_stage.value == true,
										  
				enableDX2InputInversion = (appInst.gcombo_device_type.value == "Slave" ||
						                  (appInst.gcombo_device_type.value == "Master" &&
							               appInst.gcombo_dx2_input_stage_master.value != "None")) &&
					                      appInst.gcheck_enable_invert_dx2_input_stage.value == true,
										  
			    enableOutputsInversion = ((appInst.gcheck_enable_invert_outputs.value == true) && (appInst.gcheck_enable_invert_outputs.visible == true)),
   
				uses_Internal_Clock = appInst.gcombo_clock_selection.value == "Internal Source (FD)",
				uses_External_Clock = appInst.gcombo_clock_selection.value == "External Source (DX1T)",
				is_txFIFO_enabled = appInst.gcombo_number_tx_fifo_entries.value != "0",
				is_rxFIFO_enabled = appInst.gcombo_number_rx_fifo_entries.value != "0"
				
				is_any_protocol_event_enabled =
												((isDeviceMaster && appInst.gcheck_raisingedge_event.value) ||
												 (isDeviceMaster && appInst.gcheck_fallingedge_event.value) ||
												 (isDeviceMaster && appInst.gcheck_end_event.value) ||
												 appInst.gcheck_baud_rate_event.value ||    /**< Baudrate generator event */
												 appInst.gcheck_datalost.value ||
												 (appInst.gcheck_dx2_event.visible && appInst.gcheck_dx2_event.value))			/**< DX2T event */
			
		int baud_rate = 0;
		if (isDeviceMaster && uses_Internal_Clock)
			baud_rate = (int) ((appInst.gfloat_actual_baud_rate.value) * 1000);
		List protocol_events_selection =  /* I2S protocol specific events selected list */
		[
			(isDeviceMaster && appInst.gcheck_raisingedge_event.value),
			(isDeviceMaster && appInst.gcheck_fallingedge_event.value),
			(isDeviceMaster && appInst.gcheck_end_event.value),
			appInst.gcheck_baud_rate_event.value,
			appInst.gcheck_datalost.value,
			appInst.gcheck_dx2_event.value
		]
					
		ModuleInst  = USIC_ChannelUri[4]
		ChannelInst = USIC_ChannelUri[6]

		/**********************************Dummy read*************************************/
		appInst.hwres_usic_channel.getRegValue("INPR","inpr_pinp")
		appInst.hwres_usic_channel.getRegValue("DX0CR","dx0cr_dsel")
		/*********************************************************************************/
/* Define a variable with the bit mask of enabled SPI-specific events */
if(is_any_protocol_event_enabled)
{
		out.print("""
/**********************************************************************************************************************
* MACROS
**********************************************************************************************************************/
/* Enabled protocol events */""")
			out.print("""
#define ${appLabel}_ENABLED_PROTOCOL_EVENTS  (""")
			String event_mask = ""
			String indent = " \\\n                                                "
		
			if ((isDeviceMaster == true) && (appInst.gcheck_raisingedge_event.value == true))
			{
				if (event_mask != "")
				{
					event_mask += (" | " + indent)
				}
				event_mask +=  "XMC_I2S_CH_EVENT_WA_RISING_EDGE"
			}
			if ((isDeviceMaster == true) && (appInst.gcheck_fallingedge_event.value == true))
			{
				if (event_mask != "")
				{
					event_mask += (" | " + indent)
				}
				event_mask += ("XMC_I2S_CH_EVENT_WA_FALLING_EDGE")
			}
			if ((isDeviceMaster == true) && (appInst.gcheck_end_event.value == true))
			{
				if (event_mask != "")
				{
					event_mask += (" | " + indent)
				}
				event_mask += ("XMC_I2S_CH_EVENT_WA_GENERATION_END")
			}

			if (appInst.gcheck_baud_rate_event.value == true)
			{				
				if (event_mask != "")
				{
					event_mask += (" | " + indent)
				}
				event_mask += ("XMC_I2S_CH_EVENT_BAUD_RATE_GENERATOR")
			}
			if (appInst.gcheck_datalost.value == true)
			{
				if (event_mask != "")
				{
					event_mask += (" | " + indent)
				}
				event_mask += ("XMC_I2S_CH_EVENT_DATA_LOST")
			}
			if (appInst.gcheck_dx2_event.value == true)
			{
				if (event_mask != "")
				{
					event_mask += (" | " + indent)
				}
				event_mask += ("XMC_I2S_CH_EVENT_DX2TIEN_ACTIVATED")
			}

			out.print(event_mask + """)""")
}

out.print("""
/**********************************************************************************************************************
* FUNCTION PROTOTYPE
**********************************************************************************************************************/
/* USIC channel initialization function */
void ${appLabel}_lInit(void);
""");
	
	
out.print("""
/***********************************************************************************************************************
 * DATA STRUCTURES
 **********************************************************************************************************************/""")
	out.print("""
/* USIC channel configuration for I2S */
const XMC_I2S_CH_CONFIG_t ${appLabel}_channel_config =
{
  .baudrate = ${baud_rate}U,
  .data_bits = ${appInst.ginteger_word_length.value}U,
  .frame_length = ${appInst.ginteger_frame_length.value}U,
  .data_delayed_sclk_periods = ${appInst.ginteger_transferdel.value}U,
  .wa_inversion = ${signal_polarity[appInst.gcombo_wa_signalpolarity.value]},
  .bus_mode = ${device_type[appInst.gcombo_device_type.value]}
};

/* I2S_CONFIG APP configuration structure */
const I2S_CONFIG_CONF_t ${appLabel}_config = 
{
  .channel_config   = &${appLabel}_channel_config,
  .i2s_config_init_func = ${appLabel}_lInit
};
""")
  /* Write APP handle structure */
out.print("""
/* APP handle structure */
const I2S_CONFIG_t ${appLabel} = 
{
  .channel = XMC_I2S${ModuleInst}_CH${ChannelInst},
  .config  = &${appLabel}_config
};
""")

/* Write the init function definition */
out.print("""
/***********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/* Channel initialization function */
void ${appLabel}_lInit()
{""")
	out.print("""
  /* Initialize USIC channel in I2S mode */
  XMC_I2S_CH_Init(XMC_I2S${ModuleInst}_CH${ChannelInst}, &${appLabel}_channel_config);""")
	out.print("""\n
  /* Set the frame length, word length and system word length */
  XMC_I2S_CH_SetFrameLength(XMC_I2S${ModuleInst}_CH${ChannelInst}, ${appInst.ginteger_frame_length.value}U);
  XMC_I2S_CH_SetWordLength(XMC_I2S${ModuleInst}_CH${ChannelInst}, ${appInst.ginteger_word_length.value}U);
  XMC_I2S_CH_SetSystemWordLength(XMC_I2S${ModuleInst}_CH${ChannelInst}, ${appInst.ginteger_frame_length.value}U);""")
  if (appInst.gcombo_data_shift_dir.value == "LSB") 
  {
	out.print("""\n
  /* Set LSB data shift direction */
  XMC_I2S_CH_SetBitOrderLsbFirst(XMC_I2S${ModuleInst}_CH${ChannelInst});""")
  } 
  else 
  {
	out.print("""\n
  /* Set MSB data shift direction */
  XMC_I2S_CH_SetBitOrderMsbFirst(XMC_I2S${ModuleInst}_CH${ChannelInst});""")
  }
  if(isTDVEnabled) 
  {
	int type_transmit_data_validation_index = appInst.gcombo_type_transmit_data_validation.options.indexOf(appInst.gcombo_type_transmit_data_validation.value)
	switch(type_transmit_data_validation_index) 
	{
	  case 0:
		out.print("""\n
  /* Enable transmission when TDV = 1 and DX2S = 0 */
  XMC_USIC_CH_SetStartTransmisionMode(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0);""")
		break;
	  case 1:
		out.print("""\n
  /* Enable transmission when TDV = 1 and DX2S = 1 */
  XMC_USIC_CH_SetStartTransmisionMode(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1);""")
		break;
	  case 2:
		out.print("""\n
  XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_I2S${ModuleInst}_CH${ChannelInst});""")
		break;
	}
  }
  if(appInst.gcombo_transmit_data_validation_trigger_edge.visible == true)  
  { /* This event occurs with data validation enabled for trigger event at DX2 */
	out.print("""\n
  /* The selected edge of the DX2 signal configuration */
  XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_INPUT_DX2, ${input_combination_mode[appInst.gcombo_transmit_data_validation_trigger_edge.value]});""")
  }
		
  out.print("""\n
  /* Set input source for input stage dx0 (receive pin) */
  XMC_I2S_CH_SetInputSource(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_I2S_CH_INPUT_DIN0, ${appInst.hwres_usic_channel.getRegValue("dx0cr","dx0cr_dsel")}U);""")
			
  if(isfamily_1x) 
  {
	/* XMC1000 devices can use the DX3 - DX5 input stages as additional sources of input for rx (dx0) */
	out.print("""\n
  /* Set input source for input stage dx3 (receive pin) */
  XMC_I2S_CH_SetInputSource(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_I2S_CH_INPUT_DIN1, ${appInst.hwres_usic_channel.getRegValue("dx3cr","dx3cr_dsel")}U);
  /* Set input source for input stage dx4 (receive pin) */
  XMC_I2S_CH_SetInputSource(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_I2S_CH_INPUT_DIN2, ${appInst.hwres_usic_channel.getRegValue("dx4cr","dx4cr_dsel")}U);
  /* Set input source for input stage dx5 (receive pin) */
  XMC_I2S_CH_SetInputSource(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_I2S_CH_INPUT_DIN3, ${appInst.hwres_usic_channel.getRegValue("dx5cr","dx5cr_dsel")}U);""")
  }
  if(usesDX1) 
  {
	out.print("""\n
  /* Set input source for input stage dx1 */
  XMC_I2S_CH_SetInputSource(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_I2S_CH_INPUT_SLAVE_SCLKIN, ${appInst.hwres_usic_channel.getRegValue("dx1cr","dx1cr_dsel")}U);""")
  }
  if(usesDX2)
  {
  	out.print("""\n
  /* Set input source for input stage dx2 */
  XMC_I2S_CH_SetInputSource(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_I2S_CH_INPUT_SLAVE_WA, ${appInst.hwres_usic_channel.getRegValue("dx2cr","dx2cr_dsel")}U);""")
  }
  if (isDeviceMaster && isDelayCompensationEnabled) 
  {
	out.print("""\n
  XMC_I2S_CH_EnableDelayCompensation(XMC_I2S${ModuleInst}_CH${ChannelInst});

  XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_INPUT_DX1);""")
  }

  if (enableDX1InputInversion) 
  {
	out.print("""\n
  /* Enable DX1 input polarity inversion */
  XMC_I2S_CH_EnableInputInversion(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_I2S_CH_INPUT_SLAVE_SCLKIN);""")
  }
  if (enableDX2InputInversion) 
  {
	if(isDeviceMaster) 
	{
	out.print("""\n
  /* Enable DX2 input polarity inversion */""")
	} 
	else 
	{ // isDeviceSlave
	out.print("""\n
  /* Enable WA input polarity inversion */""")
	}
	out.print("""
  XMC_I2S_CH_EnableInputInversion(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_I2S_CH_INPUT_SLAVE_WA);""")
  }
  if (uses_External_Clock) 
  {
	out.print("""\n
  /* Set the dividers registers to generate the baud rate from an external clock source */
  XMC_USIC_CH_ConfigExternalInputSignalToBRG((XMC_USIC_CH_t *const)XMC_I2S${ModuleInst}_CH${ChannelInst}, ${appInst.ginteger_divider_factor_external_clk.value}U, 2U, ${input_combination_mode[appInst.gcombo_external_clock_edge.value]});""")
  }
  if (enableOutputsInversion) 
  {
	out.print("""\n
  /* Enable output signals polarity inversion */
  XMC_USIC_CH_SetDataOutputMode(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED);""")
  }
  if(isDeviceSlave && isDelayCompensationEnabled) 
  {
	  	out.print("""\n
  /* Configure the clock polarity and clock delay */
  XMC_USIC_CH_ConfigureShiftClockOutput(XMC_I2S${ModuleInst}_CH${ChannelInst}, ${shift_clock_settings[appInst.gcombo_shift_clock_setting.value]},
									   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1);""")
  } 
  else if((isDeviceMaster)||(((isDeviceSlave) && (appInst.gcombo_sclkout_output_slave.value != "None"))))
  {
		out.print("""\n
  /* Configure the clock polarity and clock delay */
  XMC_USIC_CH_ConfigureShiftClockOutput(XMC_I2S${ModuleInst}_CH${ChannelInst}, ${shift_clock_settings[appInst.gcombo_shift_clock_setting.value]},
									   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);""")
  }
  /* GTab: Advanced Settings */
  if(appInst.gcheck_din0.value == true)
  {
out.print("""\n
  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2S${ModuleInst}_CH${ChannelInst},XMC_USIC_CH_INPUT_DX0);
""");
  }
  if((appInst.gcheck_dx1.visible == true) && (appInst.gcheck_dx1.value == true)) /* Filter is enabled only when its visible in UI and is also selected */ 
  {
out.print("""
  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2S${ModuleInst}_CH${ChannelInst},XMC_USIC_CH_INPUT_DX1);
""");
  }
  if((appInst.gcheck_dx2.value == true) && (appInst.gcheck_dx2.visible == true)) /* Filter is enabled only when its visible in UI and is also selected */
  {
out.print("""
  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2S${ModuleInst}_CH${ChannelInst},XMC_USIC_CH_INPUT_DX2);
""");
  }
/* GTab: Baudrate generator settings */
  if (appInst.gcheck_enable_capture_mode_timer.value == true)
  {
	out.print("""
  /* Enable the capture mode timer */
  XMC_USIC_CH_EnableTimeMeasurement(XMC_I2S${ModuleInst}_CH${ChannelInst});""")
  }

  /* GTab: Events */
  if(appInst.hwres_usic_channel.getRegValue("ccr","ccr_tsien") == 1) 
  {
	int transmit_shift_event_sr = appInst.hwres_usic_channel.getRegValue("inpr","inpr_tsinp")
	out.print("""\n
  /* Set the service request line for the transmit shift event */
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT, ${transmit_shift_event_sr}U);""")
  }
  if(appInst.hwres_usic_channel.getRegValue("ccr","ccr_tbien") == 1 || appInst.hwres_usic_channel.getRegValue("ccr","ccr_rsien") == 1) 
  {
	int transmit_buffer_event_sr = appInst.hwres_usic_channel.getRegValue("inpr","inpr_tbinp")
	out.print("""\n
  /* Set the service request line for the transmit buffer event */
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER, ${transmit_buffer_event_sr}U);""")
  }
  if(appInst.hwres_usic_channel.getRegValue("ccr","ccr_rien") == 1) 
  {
	int standard_receive_event_sr = appInst.hwres_usic_channel.getRegValue("inpr","inpr_rinp")
	out.print("""\n
  /* Set the service request line for the standard receive event */
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE, ${standard_receive_event_sr}U);""")
  }
  if(appInst.hwres_usic_channel.getRegValue("ccr","ccr_aien") == 1) 
  {
	int alternative_receive_event_sr = appInst.hwres_usic_channel.getRegValue("inpr","inpr_ainp")
	out.print("""\n
  /* Set the service request line for the alternative receive event */
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE, ${alternative_receive_event_sr}U);""")
  }
  /* for Protocol Specific Events */
	int protocol_events_sr = appInst.hwres_usic_channel.getRegValue("inpr","inpr_pinp")
	out.print("""\n
  /* Set the service request line for the Data Lost, Baud Rate Generator and I2S protocol events */
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, ${protocol_events_sr}U);""")
  
  if(is_txFIFO_enabled) 
  {
	if(appInst.hwres_usic_channel.getRegValue("tbctr","tbctr_stbien") == 1) 
	{
	  int standard_transmit_buffer_event_sr = appInst.hwres_usic_channel.getRegValue("tbctr","tbctr_stbinp")
	  out.print("""\n
  /* Set the service request line for the standard transmit buffer event */
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD, ${standard_transmit_buffer_event_sr}U);""")
	}
	if(appInst.hwres_usic_channel.getRegValue("tbctr","tbctr_tberien") == 1) 
	{
	  int transmit_buffer_error_event_sr = appInst.hwres_usic_channel.getRegValue("tbctr","tbctr_atbinp")
	  out.print("""\n
  /* Set the service request line for the transmit buffer error event */
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, ${transmit_buffer_error_event_sr}U);""")
	}
  }
  if(is_rxFIFO_enabled) 
  {
	if(appInst.hwres_usic_channel.getRegValue("rbctr","rbctr_srbien") == 1) 
	{
	  int standard_receive_buffer_event_sr = appInst.hwres_usic_channel.getRegValue("rbctr","rbctr_srbinp")
	  out.print("""\n
  /* Set the service request line for the standard receive buffer event */
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD, ${standard_receive_buffer_event_sr}U);""")
	}
	if((appInst.hwres_usic_channel.getRegValue("rbctr","rbctr_arbien") == 1) ||
	   (appInst.hwres_usic_channel.getRegValue("rbctr","rbctr_rberien") == 1)) 
	{
	  int alternative_receive_buffer_event_sr = appInst.hwres_usic_channel.getRegValue("rbctr","rbctr_arbinp")
	  out.print("""\n
  /* Set the service request line for the alternative receive buffer / receive buffer error event */
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, ${alternative_receive_buffer_event_sr}U);""")
	}
  }
  if(appInst.hwres_usic_channel.getRegValue("ccr","ccr_rsien") == 1) 
  {
	out.print("""\n
  /* Enable the receive start event */
  XMC_USIC_CH_EnableEvent(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_EVENT_RECEIVE_START);""")
  }
  if(appInst.hwres_usic_channel.getRegValue("ccr","ccr_tsien") == 1) 
  {
	out.print("""\n
  /* Enable the transmit shift event */
  XMC_USIC_CH_EnableEvent(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_EVENT_TRANSMIT_SHIFT);""")
  }
  if(appInst.hwres_usic_channel.getRegValue("ccr","ccr_tbien") == 1) 
  {
	out.print("""\n
  /* Enable the transmit buffer event */
  XMC_USIC_CH_EnableEvent(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);""")
  }
  if(appInst.hwres_usic_channel.getRegValue("ccr","ccr_rien") == 1) 
  {
	out.print("""\n
  /* Enable the standard receive event */
  XMC_USIC_CH_EnableEvent(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_EVENT_STANDARD_RECEIVE);""")
  }
  if(appInst.hwres_usic_channel.getRegValue("ccr","ccr_aien") == 1) 
  {
	out.print("""\n
  /* Enable the alternative event */
  XMC_USIC_CH_EnableEvent(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE);""")
  }
  if(is_txFIFO_enabled) 
  {
	if(appInst.hwres_usic_channel.getRegValue("tbctr","tbctr_stbien") == 1) 
	{
	  out.print("""\n
  /* Enable the standard transmit buffer event */
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);""")
    }
	if(appInst.hwres_usic_channel.getRegValue("tbctr","tbctr_tberien") == 1) 
	{
	  out.print("""\n
  /* Enable the transmit buffer error event */
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR);""")
	}
  }
  if(is_rxFIFO_enabled) 
  {
	if(appInst.hwres_usic_channel.getRegValue("rbctr","rbctr_srbien") == 1) 
	{
	  out.print("""\n
  /* Enable the standard receive buffer event */
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);""")
	}
	if(appInst.hwres_usic_channel.getRegValue("rbctr","rbctr_rberien") == 1) 
	{
	  out.print("""\n
 /* Enable the receive buffer error event */
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR);""")
	}
	if(appInst.hwres_usic_channel.getRegValue("rbctr","rbctr_arbien") == 1) 
	{
	  out.print("""\n
 /* Enable the alternative receive buffer event */
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2S${ModuleInst}_CH${ChannelInst}, XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE);""")
	}
  }
  if(is_any_protocol_event_enabled) 
  {
	out.print("""\n
  /* Enable the I2S protocol-specific events (PCR_ASCMode register) */
  XMC_I2S_CH_EnableEvent(XMC_I2S${ModuleInst}_CH${ChannelInst}, ${appLabel}_ENABLED_PROTOCOL_EVENTS);""")
  }
		
  /* GTab: FIFO */
  if (is_txFIFO_enabled) 
  {
	Integer FIFO_size = appInst.hwres_usic_channel.getRegValue("TBCTR", "tbctr_size")
	Integer FIFO_limit = appInst.ginteger_limit_for_transmit_events.value
	Integer FIFO_data_pointer = appInst.hwres_usic_channel.getRegValue("TBCTR", "tbctr_dptr")
	out.print("""\n
  /* Configure the transmit FIFO */
  XMC_USIC_CH_TXFIFO_Configure(${appLabel}.channel, ${FIFO_data_pointer}U, ${fifo_size[FIFO_size]}, ${FIFO_limit}U);""")
  }
  if (is_rxFIFO_enabled) 
  {
	Integer FIFO_size = appInst.hwres_usic_channel.getRegValue("RBCTR", "rbctr_size")
	Integer FIFO_limit = appInst.ginteger_limit_for_receive_events.value
	Integer FIFO_data_pointer = appInst.hwres_usic_channel.getRegValue("RBCTR", "rbctr_dptr")
	out.print("""\n
  /* Configure the receive FIFO */
  XMC_USIC_CH_RXFIFO_Configure(${appLabel}.channel, ${FIFO_data_pointer}U, ${fifo_size[FIFO_size]}, ${FIFO_limit}U);""")
  }
  if((appInst.gcombo_mclkout_output_master.value != "None") || (appInst.gcombo_mclkout_output_slave.value != "None"))
  {
	out.print("""\n
  /* Enable the master clock signal */
  XMC_I2S_CH_EnableMasterClock(XMC_I2S${ModuleInst}_CH${ChannelInst});""")
  }
out.print("""
}""")
	} /* if the channel resource is available */
} /* For all instances */
